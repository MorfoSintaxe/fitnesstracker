<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano de Treino Semanal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, query, where } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        setLogLevel('debug');

        const __app_id = typeof window.__app_id !== 'undefined' ? window.__app_id : 'default-app-id';
        const __firebase_config = typeof window.__firebase_config !== 'undefined' ? JSON.parse(window.__firebase_config) : {};
        const __initial_auth_token = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : undefined;

        let db, auth;
        let userId;

        const trainingData = [
            { day: "Segunda-feira", principal: "Natação", duracao: "45-60 min", substituicao: "Treino cardio em esteira ou bicicleta ergométrica", forca: [ "Agachamento com peso livre", "Flexão de braço", "Remada com halter", "Prancha abdominal" ]},
            { day: "Terça-feira", principal: "Remo", duracao: "45-50 min", substituicao: "Remo indoor (simulador) ou elíptico", forca: [ "Cadeira Extensora", "Leg Press", "Mesa Flexora", "Elevação pélvica", "Panturrilha no Leg Press" ]},
            { day: "Quarta-feira", principal: "Descanso Ativo", duracao: "30-45 min", substituicao: "Alongamento e mobilidade", forca: []},
            { day: "Quinta-feira", principal: "Remo (Intervalos)", duracao: "45-50 min", substituicao: "Remo indoor (HIIT) ou esteira (HIIT)", forca: [ "Desenvolvimento de ombros", "Puxada alta", "Rosca direta", "Tríceps com corda", "Abdominal com peso" ]},
            { day: "Sexta-feira", principal: "Remo (Leve)", duracao: "45-50 min", substituicao: "Bicicleta ergométrica ou caminhada inclinada", forca: [ "Agachamento com peso livre", "Passada com halteres", "Remada curvada com halteres", "Prancha abdominal" ]},
            { day: "Sábado", principal: "Natação ou Ciclismo", duracao: "60-90 min", substituicao: "Treino cardio em uma única máquina", forca: []},
            { day: "Domingo", principal: "Descanso Ativo", duracao: "30-60 min", substituicao: "Caminhada ou alongamento leve", forca: []}
        ];

        let selectedDate = new Date();
        let trainingLog = {};

        document.addEventListener("DOMContentLoaded", () => {
            const app = initializeApp(__firebase_config);
            db = getFirestore(app);
            auth = getAuth(app);
            
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    document.getElementById('user-id').textContent = `ID do Usuário: ${userId}`;
                    renderCalendar();
                    setupFirestoreListener();
                } else {
                    try {
                        if (__initial_auth_token) {
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Falha na autenticação:", error);
                        document.getElementById('message-box').innerHTML = 'Falha na autenticação. Por favor, recarregue a página.';
                        document.getElementById('message-box').classList.remove('hidden');
                    }
                }
            });

            document.getElementById('prev-month').addEventListener('click', () => {
                selectedDate.setMonth(selectedDate.getMonth() - 1);
                renderCalendar();
            });

            document.getElementById('next-month').addEventListener('click', () => {
                selectedDate.setMonth(selectedDate.getMonth() + 1);
                renderCalendar();
            });

            document.getElementById('toggle-done').addEventListener('click', () => {
                const dayElement = document.querySelector('.day.selected');
                if (dayElement) {
                    toggleDoneStatus(dayElement.dataset.date);
                } else {
                    showMessageBox('Selecione um dia no calendário para marcar.');
                }
            });

            function showMessageBox(message) {
                const messageBox = document.getElementById('message-box');
                messageBox.innerHTML = message;
                messageBox.classList.remove('hidden');
                setTimeout(() => {
                    messageBox.classList.add('hidden');
                }, 3000);
            }
        });

        function setupFirestoreListener() {
            if (!userId) {
                console.error("User ID is not defined.");
                return;
            }
            const logCollection = collection(db, `artifacts/${__app_id}/users/${userId}/training_log`);
            onSnapshot(logCollection, (snapshot) => {
                trainingLog = {};
                snapshot.forEach(doc => {
                    trainingLog[doc.id] = doc.data();
                });
                renderCalendar();
                updateTrainingInfo();
            });
        }

        function renderCalendar() {
            const calendarGrid = document.getElementById('calendar-grid');
            const monthYearText = document.getElementById('month-year');
            const weekdays = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"];
            
            calendarGrid.innerHTML = '';
            monthYearText.textContent = `${selectedDate.toLocaleString('pt-BR', { month: 'long' })} ${selectedDate.getFullYear()}`;

            const firstDayOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);
            const startingDay = firstDayOfMonth.getDay();
            const daysInMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();

            for (const weekday of weekdays) {
                const weekdayHeader = document.createElement('div');
                weekdayHeader.textContent = weekday;
                weekdayHeader.className = "text-center font-bold text-gray-500 text-sm";
                calendarGrid.appendChild(weekdayHeader);
            }

            for (let i = 0; i < startingDay; i++) {
                calendarGrid.innerHTML += `<div class="p-2"></div>`;
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), day);
                const dateString = date.toISOString().split('T')[0];
                const dayElement = document.createElement('div');
                dayElement.dataset.date = dateString;
                dayElement.textContent = day;
                dayElement.className = "day cursor-pointer rounded-full h-10 w-10 flex items-center justify-center transition-colors duration-200";

                const isToday = new Date().toDateString() === date.toDateString();
                if (isToday) {
                    dayElement.classList.add('bg-blue-500', 'text-white');
                }

                if (trainingLog[dateString]?.done) {
                    dayElement.classList.remove('bg-blue-500', 'text-white');
                    dayElement.classList.add('bg-green-500', 'text-white', 'font-bold');
                }

                dayElement.addEventListener('click', () => {
                    document.querySelectorAll('.day').forEach(el => el.classList.remove('selected', 'bg-indigo-500'));
                    dayElement.classList.add('selected', 'bg-indigo-500', 'text-white', 'scale-110');
                    updateTrainingInfo(date);
                });

                calendarGrid.appendChild(dayElement);
            }
        }

        function updateTrainingInfo(date = null) {
            const trainingInfo = document.getElementById('training-info');
            const toggleButton = document.getElementById('toggle-done');
            const selectedDay = date || new Date(document.querySelector('.day.selected')?.dataset.date || selectedDate.getFullYear(), selectedDate.getMonth(), new Date().getDate());
            
            const weekdayIndex = selectedDay.getDay();
            const weekdayName = ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"][weekdayIndex];
            const trainingPlan = trainingData.find(plan => plan.day === weekdayName);

            const dateString = selectedDay.toISOString().split('T')[0];
            const isDone = trainingLog[dateString]?.done || false;
            
            if (trainingPlan) {
                trainingInfo.innerHTML = `
                    <h3 class="font-bold text-lg mb-2 text-center text-gray-800">${weekdayName}</h3>
                    <div class="bg-indigo-100 p-4 rounded-xl shadow-inner mb-4">
                        <p class="font-semibold text-indigo-800">Treino Principal: <span class="font-normal">${trainingPlan.principal} (${trainingPlan.duracao})</span></p>
                        <p class="mt-2 font-semibold text-indigo-800">Substituição: <span class="font-normal">${trainingPlan.substituicao}</span></p>
                    </div>
                    ${trainingPlan.forca.length > 0 ? `
                    <div class="bg-indigo-100 p-4 rounded-xl shadow-inner">
                        <p class="font-semibold text-indigo-800">Treino de Força:</p>
                        <ul class="list-disc list-inside mt-2 text-sm text-gray-700">
                            ${trainingPlan.forca.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                    ` : ''}
                `;
                toggleButton.textContent = isDone ? 'Desmarcar Concluído' : 'Marcar como Concluído';
                toggleButton.classList.remove('bg-green-500', 'bg-red-500');
                toggleButton.classList.add(isDone ? 'bg-red-500' : 'bg-green-500');
            } else {
                trainingInfo.innerHTML = `
                    <div class="p-4 bg-gray-100 rounded-lg text-center text-gray-600">
                        <p>Nenhum treino agendado para este dia.</p>
                    </div>
                `;
                toggleButton.textContent = isDone ? 'Desmarcar Concluído' : 'Marcar como Concluído';
                toggleButton.classList.remove('bg-green-500', 'bg-red-500');
                toggleButton.classList.add(isDone ? 'bg-red-500' : 'bg-green-500');
            }
        }

        async function toggleDoneStatus(dateString) {
            const isDone = trainingLog[dateString]?.done || false;
            const logDocRef = doc(db, `artifacts/${__app_id}/users/${userId}/training_log`, dateString);
            
            try {
                await setDoc(logDocRef, { done: !isDone }, { merge: true });
            } catch (error) {
                console.error("Erro ao atualizar o status do treino:", error);
                showMessageBox('Não foi possível atualizar o status. Tente novamente.');
            }
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .day.selected {
            box-shadow: 0 0 0 3px #6366f1;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 p-4 flex flex-col items-center min-h-screen">

    <!-- Message Box -->
    <div id="message-box" class="fixed top-4 left-1/2 -translate-x-1/2 bg-gray-800 text-white text-center p-3 rounded-xl shadow-lg transition-opacity duration-300 hidden z-50"></div>

    <div class="container bg-white rounded-3xl shadow-2xl p-6 md:p-8 w-full max-w-md my-8">
        <header class="text-center mb-6">
            <h1 class="text-4xl font-extrabold text-indigo-700">Plano de Treino</h1>
            <p class="text-sm mt-2 text-gray-500" id="user-id">Carregando ID...</p>
        </header>
        
        <!-- Calendar Section -->
        <div class="calendar-container bg-indigo-50 p-4 rounded-xl shadow-inner mb-6">
            <div class="flex justify-between items-center mb-4">
                <button id="prev-month" class="p-2 rounded-full hover:bg-indigo-200 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <h2 id="month-year" class="text-xl font-bold text-indigo-700"></h2>
                <button id="next-month" class="p-2 rounded-full hover:bg-indigo-200 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
            </div>
            <div id="calendar-grid" class="grid grid-cols-7 gap-2 text-sm text-center"></div>
        </div>

        <!-- Training Details Section -->
        <div id="training-info" class="mb-6">
            <div class="p-4 bg-gray-100 rounded-lg text-center text-gray-600">
                <p>Selecione um dia no calendário para ver o treino.</p>
            </div>
        </div>

        <!-- Action Button -->
        <button id="toggle-done" class="w-full py-3 rounded-full text-white font-bold text-lg shadow-lg transition-transform duration-200 hover:scale-105 active:scale-95">
            Marcar como Concluído
        </button>
    </div>

</body>
</html>
